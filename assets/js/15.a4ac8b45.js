(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{263:function(t,e,a){"use strict";a.r(e);var s=a(28),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"train-model"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#train-model"}},[t._v("#")]),t._v(" train_model")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("models"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("train_model"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("model"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" df"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" pd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DataFrame"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" outcome"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" features"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data_type"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" metrics"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" return_preds"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("This function trains a given model using train/val data.")]),t._v(" "),a("p",[t._v("If outcome is multiple and the model does not support multiple output then an ensemble of models is used.")]),t._v(" "),a("h2",{attrs:{id:"arguments"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arguments"}},[t._v("#")]),t._v(" Arguments")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("model:")]),t._v(" A Model instance. Optionally can be a String to save an import statement, if using default parameters.")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("df:")]),t._v(" Pandas DataFrame containing patients and the features to utilize.")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("features:")]),t._v(" A list of the feature columns, only if a subset of the "),a("em",[t._v("df")]),t._v(" should be utilized.  By default all columns within "),a("em",[t._v("df")]),t._v(" will be used except for "),a("em",[t._v("PatientID")]),t._v(".")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("outcome:")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("String:")]),t._v(" If the outcome is a column in the "),a("em",[t._v("df")]),t._v(" then provide the name of the column as a String")]),t._v(" "),a("li",[a("strong",[t._v("List:")]),t._v(" List of outcomes as strings.")]),t._v(" "),a("li",[a("strong",[t._v("Pandas Series:")]),t._v(" For a single output scenario.")]),t._v(" "),a("li",[a("strong",[t._v("Pandas DataFrame:")]),t._v(" For multiple output scenarios, each column should be an output.")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("data_type:")]),t._v(" An optional Pandas DataFrame containing a column named "),a("em",[t._v("Type")]),t._v(" with the values "),a("code",[t._v("train")]),t._v(", "),a("code",[t._v("val")]),t._v(", or "),a("code",[t._v("test")]),t._v(", indicating which dataset the patient belongs in.  To use this feature, the "),a("em",[t._v("outcome")]),t._v(" cannot be a Pandas Series due to inability to correctly reference patients.")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("metrics:")]),t._v(" A list of "),a("RouterLink",{attrs:{to:"/models/metrics/base.html"}},[t._v("metrics")]),t._v(" for the model to be evaluated against and to be printed out.  Optionally can be a String to save an import statement, if using default parameters.")],1)]),t._v(" "),a("li",[a("p",[a("strong",[t._v("return_preds:")]),t._v(" Whether to return the model predictions.  If enabled then returns a tuple containing the train and val predictions.")])])]),t._v(" "),a("h2",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("ul",[a("li",[t._v("Trained model instance.")]),t._v(" "),a("li",[t._v("Numpy array containing predicted values, if "),a("em",[t._v("return_results")]),t._v(" is "),a("code",[t._v("True")]),t._v(".")])]),t._v(" "),a("h2",{attrs:{id:"examples"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#examples"}},[t._v("#")]),t._v(" Examples")])])}),[],!1,null,null,null);e.default=n.exports}}]);